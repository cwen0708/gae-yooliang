D290008581 洪清連 66 5 2

    if(!(window.jQuery && window.jQuery.fn.jquery == '1.8.1'))
    {
     var element = document.createElement('script');
     element.setAttribute('src', 'https://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js');
     element.setAttribute('type', 'text/javascript');
     document.getElementsByTagName('head')[0].appendChild(element);
    }
$(".jfk-checkbox-checkmark").click();

c.storage.googleapis.com

C:/Python27/python.exe "C:/Program Files (x86)/Google/google_appengine/appcfg.py" -e cwen0708@gmail.com --passin --no_cookies rollback "C:\Dropbox\WebSite\gae-yooliang"

http://www.hmes.kh.edu.tw/~jona/redhat/mysqlphp/mysqlsyntax.htm

查看資料表狀態
SHOW TABLE STATUS
列出資料表的欄位
SHOW COLUMNS FROM tbl_name

建立資料庫
CREATE DATABASE 資料庫名稱 CHARACTER SET utf8 COLLATE utf8_general_ci;

建立資料表
create table 資料表名稱(
  account     varchar(255),
  email       varchar(255) NOT NULL,
  id          int not null auto_increment,
  primary key (id)
) engine=myisam default charset=utf8;

新增欄位
alter table 資料表名稱 add image varchar(2000) after account;
alter table 資料表名稱 add is_enable tinyint(1) after account;
alter table 資料表名稱 add is_delete tinyint(1) after is_enable;
alter table 資料表名稱 add sort timestamp default current_timestamp after is_enable;

欄位更名
alter table 資料表名稱 change 舊名稱 新名稱 新屬性;

刪除欄位
alter table 資料表名稱 drop column 欄位名稱

查看資料表
select * from 資料表名稱

記錄筆數
select count(1) from 資料表名稱

刪除資料表
drop table 資料表名稱

資料表更名
alter table 舊資料表名稱 rename as 新資料表名稱;








資料表-管理員
建立
create table Administrator(
  account     varchar(255),
  email       varchar(255) NOT NULL,
  is_enable   tinyint(1),
  is_delete   tinyint(1) default 0,
  sort        timestamp,
  id          int not null auto_increment,
  primary key (id)
) engine=myisam default charset=utf8;
查看
select * from Administrator
刪除資料表
drop table Administrator


資料表-輪撥圖
建立
create table Banner(
  title       varchar(255),
  image       varchar(2000) NOT NULL,
  is_enable   tinyint(1),
  is_delete   tinyint(1) default 0,
  sort        timestamp,
  id          int not null auto_increment,
  primary key (id)
) engine=myisam default charset=utf8;
查看
select * from Aboutus
刪除資料表
drop table Aboutus


create table Solution(
  title       varchar(255),
  content     mediumtext,
  image       varchar(2000) NOT NULL,
  is_enable   tinyint(1),
  is_delete   tinyint(1) default 0,
  sort        timestamp,
  id          int not null auto_increment,
  primary key (id)
) engine=myisam default charset=utf8;








python
from google.appengine.api import rdbms

_INSTANCE_NAME = 'gaesitenetsql:gaesitenet'

新增記錄
        conn = rdbms.connect(instance=_INSTANCE_NAME, database='guestbook')
        cursor = conn.cursor()
        # Note that the only format string supported is %s
        cursor.execute('INSERT INTO entries (guestName, content) VALUES (%s, %s)', (fname, content))
        conn.commit()
        conn.close()



alter table 舊名 rename as 新名;
例如
alter table T1 rename as LIST;
然後可以用 show tables; 或 select * from LIST 看看結果。
改變欄位名稱就比較麻煩了，它相當於要把整個欄位的屬性重新定義一遍。 例如要把 list 表格的 gender 欄位改名字為 sex，其他屬性不變。 那麼要先查詢 gender 的屬性是什麼，例如它是

gender enum('F','M') not null
則我們就說要把這個欄位改成以下屬性：
sex enum('F','M') not null
注意，欄位名稱和資料型態這些資料都要寫，不改變的部份也要重述一遍。 指令是
alter table list change gender sex enum('F','M') not null;
一般而言，語法是
alter table 表格 change 舊欄位名稱 新欄位的完整屬性;


alter table AboutUs change sort     sort   timestamp default CURRENT_TIMESTAMP,




Python代码
#!/usr/bin/env python
#coding=utf-8
###################################
# @author migle
# @date 2010-01-17
##################################
#MySQLdb 示例
#
##################################
import MySQLdb

#建立和数据库系统的连接
conn = MySQLdb.connect(host='localhost', user='root',passwd='longforfreedom')

#获取操作游标
cursor = conn.cursor()
#执行SQL,创建一个数据库.
cursor.execute("""create database python """)

#关闭连接，释放资源
cursor.close();
Python代码
#!/usr/bin/env python
#coding=utf-8
###################################
# @author migle
# @date 2010-01-17
##################################
#MySQLdb 示例
#
##################################
import MySQLdb

#建立和数据库系统的连接
conn = MySQLdb.connect(host='localhost', user='root',passwd='longforfreedom')

#获取操作游标
cursor = conn.cursor()
#执行SQL,创建一个数据库.
cursor.execute("""create database python """)

#关闭连接，释放资源
cursor.close();


创建数据库，创建表，插入数据，插入多条数据

Python代码
#!/usr/bin/env python
#coding=utf-8
###################################
# @author migle
# @date 2010-01-17
##################################
#MySQLdb 示例
#
##################################
import MySQLdb

#建立和数据库系统的连接
conn = MySQLdb.connect(host='localhost', user='root',passwd='longforfreedom')

#获取操作游标
cursor = conn.cursor()
#执行SQL,创建一个数据库.
cursor.execute("""create database if not exists python""")

#选择数据库
conn.select_db('python');
#执行SQL,创建一个数据表.
cursor.execute("""create table test(id int, info varchar(100)) """)

value = [1,"inserted ?"];

#插入一条记录
cursor.execute("insert into test values(%s,%s)",value);

values=[]


#生成插入参数值
for i in range(20):
    values.append((i,'Hello mysqldb, I am recoder ' + str(i)))
#插入多条记录

cursor.executemany("""insert into test values(%s,%s) """,values);

#关闭连接，释放资源
cursor.close();
Python代码
#!/usr/bin/env python
#coding=utf-8
###################################
# @author migle
# @date 2010-01-17
##################################
#MySQLdb 示例
#
##################################
import MySQLdb

#建立和数据库系统的连接
conn = MySQLdb.connect(host='localhost', user='root',passwd='longforfreedom')

#获取操作游标
cursor = conn.cursor()
#执行SQL,创建一个数据库.
cursor.execute("""create database if not exists python""")

#选择数据库
conn.select_db('python');
#执行SQL,创建一个数据表.
cursor.execute("""create table test(id int, info varchar(100)) """)

value = [1,"inserted ?"];

#插入一条记录
cursor.execute("insert into test values(%s,%s)",value);

values=[]


#生成插入参数值
for i in range(20):
    values.append((i,'Hello mysqldb, I am recoder ' + str(i)))
#插入多条记录

cursor.executemany("""insert into test values(%s,%s) """,values);

#关闭连接，释放资源
cursor.close();


查询和插入的流程差不多，只是多了一个得到查询结果的步骤

Python代码
#!/usr/bin/env python
#coding=utf-8
######################################
#
# @author migle
# @date 2010-01-17
#
######################################
#
# MySQLdb 查询
#
#######################################

import MySQLdb

conn = MySQLdb.connect(host='localhost', user='root', passwd='longforfreedom',db='python')

cursor = conn.cursor()

count = cursor.execute('select * from test')

print '总共有 %s 条记录',count

#获取一条记录,每条记录做为一个元组返回
print "只获取一条记录:"
result = cursor.fetchone();
print result
#print 'ID: %s   info: %s' % (result[0],result[1])
print 'ID: %s   info: %s' % result

#获取5条记录，注意由于之前执行有了fetchone()，所以游标已经指到第二条记录了，也就是从第二条开始的所有记录
print "只获取5条记录:"
results = cursor.fetchmany(5)
for r in results:
    print r

print "获取所有结果:"
#重置游标位置，0,为偏移量，mode＝absolute | relative,默认为relative,
cursor.scroll(0,mode='absolute')
#获取所有结果
results = cursor.fetchall()
for r in results:
    print r
conn.close()
Python代码
#!/usr/bin/env python
#coding=utf-8
######################################
#
# @author migle
# @date 2010-01-17
#
######################################
#
# MySQLdb 查询
#
#######################################

import MySQLdb

conn = MySQLdb.connect(host='localhost', user='root', passwd='longforfreedom',db='python')

cursor = conn.cursor()

count = cursor.execute('select * from test')

print '总共有 %s 条记录',count

#获取一条记录,每条记录做为一个元组返回
print "只获取一条记录:"
result = cursor.fetchone();
print result
#print 'ID: %s   info: %s' % (result[0],result[1])
print 'ID: %s   info: %s' % result

#获取5条记录，注意由于之前执行有了fetchone()，所以游标已经指到第二条记录了，也就是从第二条开始的所有记录
print "只获取5条记录:"
results = cursor.fetchmany(5)
for r in results:
    print r

print "获取所有结果:"
#重置游标位置，0,为偏移量，mode＝absolute | relative,默认为relative,
cursor.scroll(0,mode='absolute')
#获取所有结果
results = cursor.fetchall()
for r in results:
    print r
conn.close()

http://blog.gogojimmy.net/2012/02/29/git-scenario/
如何安裝 Git
Mac : 安裝 Homebrew
  brew install git
Linux(Debian) : apt-get install git-core
Linux(Fedora) : yum install git-core
Windows : 下載安裝 msysGit
如何設定 Git
Mac : Set Up Git on Mac
Linux : Set Up Git on Linux
Windows : Set up Git on Windows
如何開始一個 Git Respository
在專案底下使用 git init 開始一個新的 Git repo.
使用 git clone 複製一個專案
如何將檔案加入 Stage
使用 git add 將想要的檔案加入 Stage.
git add . 會將所有編修過的檔案加入 Stage (新增但還沒 Commit 過的檔案並不會加入)
如何將檔案從 Stage 中移除(取消add)
git reset HEAD 檔案名稱
如何將檔案提交(commit)
使用 git commit會將 Stage 狀態的檔案做 Commit 動作
git commit -m "commit訊息" 可以略過編輯器直接輸入 commit 訊息完成提交。
git commit -am "commit訊息" 等同於先git add .後略過編輯器提交 commit。
如何修改/取消上一次的 commit
git commit --amend 修改上一次的 commit 訊息。
git commit --amend 檔案1 檔案2... 將檔案1、檔案2加入上一次的 commit。
git reset HEAD^ --soft 取消剛剛的 commit，但保留修改過的檔案。
git reset HEAD^ --hard 取消剛剛的 commit，回到再上一次 commit的 乾淨狀態。
分支基本操作(branch)
git branch 列出所有本地端的 branch。
git branch -r 列出所有遠端的 branch。
git branch -a 列出所有本地及遠端的 branch。
git branch "branch名稱" 建立一個新的 branch。
git checkout -b "branch名稱" 建立一個新的 branch 並切換到該 branch。
git branch branch名稱 起始點 以起始點作為基準建立一個新的 branch，起始點可以是一個 tag，branch 或是 commit。
git branch --track branch名稱 遠端branch 建立一個 tracking 遠端 branch 的 branch，這樣以後 push/pull都會直接對應到該遠端的branch。
git branch --set-upstream branch 遠端branch 將一個已存在的 branch 設定成 tracking 遠端的branch。
git branch -d "branch 名稱" 刪除 branch。
git -r -d 遠端branch 刪除一個 tracking 的遠端 branch，例如git branch -r -d wycats/master
git push repository名稱 :遠端branch 刪除一個 repository 的 branch，通常用在刪除遠端的 branch，例如git push origin :old_branch_to_be_deleted。
git checkout branch名稱 切換到另一個 branch(所有修改過程會被保留)。
遠端操作(remote)
git remote add remote名稱 remote網址 加入一個 remote repository，例如 git remote add github git://github.com/gogojimmy/test.git
git push remote名稱 :branch名稱 刪除遠端 branch，例如 git push origin :somebranch。
git pull remote名稱 branch名稱 下載一個遠端的 branch 並合併(注意是下載遠端的 branch 合併到目前本地端所在的 branch)。
git push 類似於 pull 操作，將本地端的 branch 上傳到遠端。
合併操作(merge)
git merge branch名稱 合併指定的 branch 到目前的 branch。
git merge branch名稱 --no-commit 合併指定的 branch 到目前的 branch 但是不會產生合併的 commit。
git cherry-pick SHA 將某一個 commit 的內容合併到目前 branch，指定 commit 是使用該 commit 的 SHA 值，例如 git cherry-pick 7300a6130d9447e18a931e898b64eefedea19544。
暫存操作(stash)
git stash 將目前所做的修改都暫存起來。
git stash apply 取出最新一次的暫存。
git stash pop 取出最新一次的暫存並將他從暫存清單中移除。
git stash list 顯示出所有的暫存清單。
git stash clear 清除所有暫存。
常見問題：
我的 code 改爛了我想全部重來，我要如何快速回到乾淨的目錄?
git reset --hard 這指令會清除所有與最近一次 commit 不同的修改。
merge 過程中發生 confict 我想放棄 merge，要如何取消 merge？
一樣使用 git reset --hard 可以取消這次的 merge。
如何取消這次的 merge 回到 merge 前的狀態?
git reset --hard ORIG_HEAD 這指令會取消最近一次成功的 merge 以及所有你在這次 merge 後所做的修改。
如何回復單獨檔案到原本 commit 的狀態?
git checkout 檔案名稱 這指令會將已經被修改過的檔案回復到最近一次 commit 的樣子。